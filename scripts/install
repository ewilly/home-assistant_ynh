#!/bin/bash

set -eu
source _common.sh
source /usr/share/yunohost/helpers

# manage script failure
ynh_abort_if_errors

# retrieve arguments
app=$YNH_APP_INSTANCE_NAME
domain=$YNH_APP_ARG_DOMAIN
is_public=$YNH_APP_ARG_IS_PUBLIC
has_password=$YNH_APP_ARG_HAS_PASSWORD
password=$YNH_APP_ARG_PASSWORD
username_configurator=$YNH_APP_ARG_USERNAME_CONFIGURATOR
password_configurator=$YNH_APP_ARG_PASSWORD_CONFIGURATOR
# definie useful vars
final_path="/srv/$app"
data_path="/home/$app/.$app"

# check domain/path availability
path_url=$(ynh_normalize_url_path "/")
ynh_webpath_available $domain $path_url
ynh_webpath_register $app $domain $path_url

# add required packages
ynh_install_app_dependencies "$PKG_DEPENDENCIES"

# save app settings
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app has_password $has_password
[[ ! -z $password ]] && ynh_app_setting_set $app password $password
[[ ! -z $username_configurator ]] && ynh_app_setting_set $app username_configurator $username_configurator
[[ ! -z $password_configurator ]] && ynh_app_setting_set $app password_configurator $password_configurator

# find a free port & open it
## for Home Assistant 
port=$(ynh_find_port 8123)
ynh_app_setting_set $app port $port
yunohost firewall allow TCP $port > /dev/null 2>&1
## for Home Assistant configurator
port_configurator=$(ynh_find_port 3218)
ynh_app_setting_set $app port_configurator $port_configurator
yunohost firewall allow TCP $port_configurator > /dev/null 2>&1

# create a dedicated system user
useradd -rm $app -G dialout,gpio

# create a directory for the installation of Home Assistant
myynh_create_dir $final_path
chown $app: $final_path

# create a directory for the datas of Home Assistant
myynh_create_dir $data_path
chown $app: $data_path

# retrieve upstream version
source ../conf/app.src
ynh_app_setting_set $app ha_version $UPSTREAM_HA_VERSION
ynh_app_setting_set $app configurator_version $UPSTREAM_CONFIGURATOR_VERSION

# installation
## for Home Assistant in a virtual environment
exec_as "$app" -H -s /bin/bash -c " \
	echo 'create the virtual environment' \
		&& python3 -m venv $final_path \
	&& echo 'activate the virtual environment' \
		&& source $final_path/bin/activate \
	&& echo 'install a required python package' \
		&& python3 -m pip install --upgrade wheel \
	&& echo 'install Home Assistant' \
		&& pip3 install --upgrade $app==$UPSTREAM_HA_VERSION \
	"
## for Home Assistant configurator
wget https://raw.githubusercontent.com/danielperna84/hass-configurator/$UPSTREAM_CONFIGURATOR_VERSION/configurator.py -O "$data_path/configurator.py"
chown $app: "$data_path/configurator.py"
chmod 755 "$data_path/configurator.py"

# set default configuration files
## for Home Assistant
### for configuration.yaml
if [ $has_password -eq 1 ]; then
	ynh_replace_string "# api_password" "api_password" "../conf/homeassistant_conf_files/configuration.yaml"
fi
ynh_replace_string "__PORT__" "$port" "../conf/homeassistant_conf_files/configuration.yaml"
ynh_replace_string "__DOMAIN__" "$domain" "../conf/homeassistant_conf_files/configuration.yaml"

### for secrets.yaml
ynh_replace_string "__PASSWORD__" "$password" "../conf/homeassistant_conf_files/secrets.yaml"

### move all homeassistant_conf_files
cp -r "../conf/homeassistant_conf_files/." "$data_path/"
chown -R $app: "$data_path"

## for Home Assistant configurator
if test -n "${username_configurator:-}"; then
	### username
	match_string='"USERNAME": null'
	replace_string='"USERNAME": "'${username_configurator}'"'
	ynh_replace_string "${match_string}" "${replace_string}" "../conf/homeassistant-configurator_conf_files/configurator_settings.conf"
	### password
	password_configurator=$(echo -n "$password_configurator" | sha256sum | cut -d " " -f 1)
	match_string='"PASSWORD": null'
	replace_string='"PASSWORD": "{sha256}'${password_configurator}'"'
	ynh_replace_special_string "${match_string}" "${replace_string}" "../conf/homeassistant-configurator_conf_files/configurator_settings.conf"
fi
ynh_replace_string "__PORT__" "$port" "../conf/homeassistant-configurator_conf_files/configurator_settings.conf"
ynh_replace_string "__PORT-CONFIGURATOR__" "$port_configurator" "../conf/homeassistant-configurator_conf_files/configurator_settings.conf"
cp "../conf/homeassistant-configurator_conf_files/configurator_settings.conf" "$data_path/configurator_settings.conf"
chown $app: "$data_path/configurator_settings.conf"

# setup up autostart using systemd
## for Home Assistant
ynh_replace_string "__PORT__" "$port" "../conf/$app.service"
cp "../conf/$app.service" "/etc/systemd/system/$app@$app.service"
## for Home Assistant configurator
ynh_replace_string "__PORT-CONFIGURATOR__" "$port_configurator" "../conf/$app-configurator.service"
cp "../conf/$app-configurator.service" "/etc/systemd/system/$app-configurator@$app.service"

# add service in admin panel
## for Home Assistant
yunohost service add "$app@$app" --log "$data_path/home-assistant.log"
## for Home Assistant configurator
yunohost service add "$app-configurator@$app"

# enable & restart systemd service
systemctl --system daemon-reload
## for Home Assistant
systemctl enable "$app@$app.service"
systemctl restart "$app@$app.service"
## for Home Assistant configurator
systemctl enable "$app-configurator@$app.service"
systemctl restart "$app-configurator@$app.service"

# create a dedicated nginx config
## for Home Assistant configurator (before because ynh_add_nginx_config reload nginx and give an error due to __PORT-CONFIGURATOR__)
ynh_replace_string "__PORT-CONFIGURATOR__" "$port_configurator" "../conf/nginx.conf"
## for Home Assistant
ynh_add_nginx_config

# reload nginx
systemctl reload nginx

# unprotect app access if public (needed for Android app to work)
if [ $is_public -eq 1 ]; then
	ynh_app_setting_set "$app" unprotected_uris "/"
fi
